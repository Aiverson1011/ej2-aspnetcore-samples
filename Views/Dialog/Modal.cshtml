
@using Syncfusion.EJ2
@{
    var Modalanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
}
@section ControlsSection {

    <div class=" col-lg-8 control-section" id="target">
        <ejs-button id="dialogBtn" content="Open"></ejs-button>
        <ejs-dialog id="modal_dialog" animationSettings="Modalanimation" width="335px" target="#target" content="Your current software version is up to date." open="dialogOpen" close="dialogClose" header="Software Update" isModal="true">
            <e-dialog-buttons>
                <e-dialog-dialogbutton buttonModel="ViewBag.Okbutton" click="dlgButtonClick"></e-dialog-dialogbutton>
            </e-dialog-buttons>
        </ejs-dialog>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="width:60%;">
                        <div style="font-size:13px;">Close on overlay click</div>
                    </td>
                    <td>
                        <ejs-checkbox id="checkbox" checked="false" change="onChange"></ejs-checkbox>                        
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

}

<style>
    #target .control-wrapper {
        margin: 0px;
    }
    /* custom code start */
    #target {
        min-height: 350px;
    }

    @@media screen and (min-width: 150px) and (max-width: 480px) {
        .control-section {
            margin-bottom: 30px;
        }

        .control-wrapper {
            margin-bottom: 0px;
        }
    }
    /* custom code end */
</style>

@section PreScripts {
    <script>
        document.getElementById("dialogBtn").addEventListener('click', function () {
            var dialogObj = document.getElementById("modal_dialog")
            dialogObj.ej2_instances[0].show();
        });
        function onChange(args) {
            var dialogObj = document.getElementById('modal_dialog').ej2_instances[0]
            if (args.checked) {
                dialogObj.overlayClick = function () {
                    dialogObj.hide();
                };
            } else {
                dialogObj.overlayClick = function () {
                    dialogObj.show();
                };
            }
        }
        function dialogClose() {
            document.getElementById('dialogBtn').style.display = 'block';
        }
        function dialogOpen() {
            document.getElementById('dialogBtn').style.display = 'none';
        }
        function dlgButtonClick() {
            var dialogObj = document.getElementById("modal_dialog")
            dialogObj.ej2_instances[0].hide();
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates that the modal behavior of Dialog control.
            Choose "Close on overlay" option from property panel to decide whether the Dialog will be closed on click on the overlay.
            Click on “Open” button to show the Dialog again if it is closed.
        </p>

    </div>
}
@section Description{
    <div id="description">
        <p>
            A modal prevents the access to the parent application, so that the user should interact with the Dialog compulsory before continuing
            the parent application.
        </p>
    </div>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the modal pop-up behavior of the ASP.NET Core dialog control, which helps display critical information such as errors and warnings." />
}

@*custom code end*@