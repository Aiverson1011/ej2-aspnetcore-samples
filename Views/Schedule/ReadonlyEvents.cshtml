@using Syncfusion.EJ2

@section ControlsSection{
    <div class="control-section">
        <div class="schedule-wrapper">
            <ejs-schedule id="schedule" height="650" eventClick="onEventClick" popupOpen="onPopupOpen" eventRendered="onEventRendered" resizeStart="onResizeStart" dragStart="onDragStart">
                <e-schedule-views>
                    <e-schedule-view option="Day"></e-schedule-view>
                    <e-schedule-view option="Week"></e-schedule-view>
                    <e-schedule-view option="WorkWeek"></e-schedule-view>
                    <e-schedule-view option="Month"></e-schedule-view>
                </e-schedule-views>
                <e-schedule-eventsettings dataSource="@ViewBag.appointments"></e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>

    <style>
        .e-schedule .e-read-only {
            opacity: .8;
        }
    </style>
    <script type="text/javascript">
        var isReadOnly = function (data) {
            return data.ReadOnly || (data.EndTime < new Date());
        };
        function onEventClick(args) {
            if (args.element.classList.contains('e-read-only')) {
                args.cancel = true;
            }
        }
        function onPopupOpen(args) {
            if (args.type === 'Editor' && isReadOnly(args.data)) {
                args.cancel = true;
            }
        }
        function onEventRendered(args) {
            if (isReadOnly(args.data)) {
                args.element.setAttribute('aria-readonly', 'true');
                args.element.classList.add('e-read-only');
            }
        }
        function onResizeStart(args) {
            if ((args.element).classList.contains('e-read-only')) {
                args.cancel = true;
            }
        }
        function onDragStart(args) {
            if ((args.element).classList.contains('e-read-only')) {
                args.cancel = true;
            }
        }
    </script>
}

@section Meta{
    <meta name="description" content="This demo for Essential JS2 Schedule control shows how to make specific events on the scheduler to be displayed in a read-only mode." />
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases how to make specific events on the Schedule to be displayed in a read-only mode. The read-only events
            can be simply viewed and prevented from undergoing any edit actions.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this demo, the events that has occurred on the past hours from the current time are made as read-only and the CRUD actions
            has been prevented on it. Also, the way to make specific events as read-only regardless of time has been done by
            adding an additional field
            <code>ReadOnly</code> to the event object to hold the value for it either as true or false.
        </p>
        <p>
            By checking these two conditions, the events are marked as read-only in this sample and also, visually differentiated the
            shade of the readonly events by setting CSS style and
            <code>aria-readonly</code> attribute to it within the
            <code>eventRendered</code> event which gets triggered before every event rendering on the Schedule user interface.
        </p>
        <p>
            The event editor is prevented to open on these read-only events by setting
            <code>args.cancel = true</code> within the
            <code>popupOpen</code> event which checks for the condition whether the popup type is
            <code>editor</code> and the event is readonly.
        </p>
    </div>
}
